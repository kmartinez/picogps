#!/usr/bin/env python

from parsenmea import parsefixdata
from gpsdb import GpsDb
import logging
from optparse import OptionParser, OptionGroup

DEFAULT_LOG_LEVEL = logging.INFO

DEFAULT_CONFIG = "db.ini"


class TrackerUnpacker(object):

    def __init__(self, config, log_level):
        self.logger = logging.getLogger("Tracker Unpacker")
        self.logger.setLevel(log_level)
        logging.basicConfig(format='%(asctime)s - %(name)s - %(lineno)d - %(levelname)s- %(message)s')
        self.db = GpsDb(config, log_level)

    def unpackall(self):
        unprocessed = self.db.get_unprocessed_messages()
        self.logger.info("%d messages to process", len(unprocessed))
        for msg in unprocessed:
            msg_id = msg[0]
            imei = msg[1]
            data = msg[2]
            positions = data.split(";")
            self.logger.info("%d positions in message" % (len(positions) - 1))##Take off 1 because last element in array is empty
            for pos in positions:
                if pos == "":   #Handle the empty element at the end
                    continue
                try:
                    (timestamp, lat, lon, alt, qual, hdop, sats) = parsefixdata(pos)
                except Exception as e:
                    self.logger.error("Unable to parse data \"%s\"" % pos)
                try:
                    self.logger.info("Saving reading from %s at %s" % (imei, timestamp))
                    self.db.save_position(
                        imei, timestamp, lat, lon, alt, qual,
                        hdop, sats)
                except Exception as e:
                    self.logger.critical(str(e))
                    break
            try:
                self.db.set_processed(msg_id)
            except Exception as e:
                self.logger.critical(str(e))
                break


if __name__ == "__main__":
    LOG_LEVEL = DEFAULT_LOG_LEVEL
    PARSER = OptionParser()
    GROUP = OptionGroup(
        PARSER, "Verbosity Options",
        "Options to change the level of output")
    GROUP.add_option(
        "-q", "--quiet", action="store_true",
        dest="quiet", default=False,
        help="Supress all but critical errors")
    GROUP.add_option(
        "-v", "--verbose", action="store_true",
        dest="verbose", default=False,
        help="Print all information available")
    PARSER.add_option_group(GROUP)
    PARSER.add_option(
        "-c", "--config", action="store",
        type="string", dest="config_file",
        help="Config file containing database credentials")
    (OPTIONS, ARGS) = PARSER.parse_args()
    if OPTIONS.quiet:
        LOG_LEVEL = logging.CRITICAL
    elif OPTIONS.verbose:
        LOG_LEVEL = logging.DEBUG
    if OPTIONS.config_file is None:
        CONFIG = DEFAULT_CONFIG
    else:
        CONFIG = OPTIONS.config_file
    TRACK = TrackerUnpacker(CONFIG, LOG_LEVEL)
    TRACK.unpackall()
